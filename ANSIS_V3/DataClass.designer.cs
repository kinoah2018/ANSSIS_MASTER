#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ANSIS_V3
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ans")]
	public partial class DataClassDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertUserType(UserType instance);
    partial void UpdateUserType(UserType instance);
    partial void DeleteUserType(UserType instance);
    partial void InsertPayment(Payment instance);
    partial void UpdatePayment(Payment instance);
    partial void DeletePayment(Payment instance);
    partial void InsertSchedule(Schedule instance);
    partial void UpdateSchedule(Schedule instance);
    partial void DeleteSchedule(Schedule instance);
    partial void InsertSchoolyear(Schoolyear instance);
    partial void UpdateSchoolyear(Schoolyear instance);
    partial void DeleteSchoolyear(Schoolyear instance);
    partial void InsertSection(Section instance);
    partial void UpdateSection(Section instance);
    partial void DeleteSection(Section instance);
    partial void InsertStudent(Student instance);
    partial void UpdateStudent(Student instance);
    partial void DeleteStudent(Student instance);
    partial void InsertStudentGrade(StudentGrade instance);
    partial void UpdateStudentGrade(StudentGrade instance);
    partial void DeleteStudentGrade(StudentGrade instance);
    partial void InsertStudentPayment(StudentPayment instance);
    partial void UpdateStudentPayment(StudentPayment instance);
    partial void DeleteStudentPayment(StudentPayment instance);
    partial void InsertSubject(Subject instance);
    partial void UpdateSubject(Subject instance);
    partial void DeleteSubject(Subject instance);
    partial void InsertTeacher(Teacher instance);
    partial void UpdateTeacher(Teacher instance);
    partial void DeleteTeacher(Teacher instance);
    partial void InsertTimeSchedule(TimeSchedule instance);
    partial void UpdateTimeSchedule(TimeSchedule instance);
    partial void DeleteTimeSchedule(TimeSchedule instance);
    partial void InsertUserAccount(UserAccount instance);
    partial void UpdateUserAccount(UserAccount instance);
    partial void DeleteUserAccount(UserAccount instance);
    partial void InsertUserSecurity(UserSecurity instance);
    partial void UpdateUserSecurity(UserSecurity instance);
    partial void DeleteUserSecurity(UserSecurity instance);
    partial void InsertRequiOfRequirement(RequiOfRequirement instance);
    partial void UpdateRequiOfRequirement(RequiOfRequirement instance);
    partial void DeleteRequiOfRequirement(RequiOfRequirement instance);
    partial void InsertBook(Book instance);
    partial void UpdateBook(Book instance);
    partial void DeleteBook(Book instance);
    partial void InsertProcessBook(ProcessBook instance);
    partial void UpdateProcessBook(ProcessBook instance);
    partial void DeleteProcessBook(ProcessBook instance);
    partial void InsertInquiry(Inquiry instance);
    partial void UpdateInquiry(Inquiry instance);
    partial void DeleteInquiry(Inquiry instance);
    #endregion
		
		public DataClassDataContext() : 
				base(global::ANSIS_V3.Properties.Settings.Default.ansConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<UserType> UserTypes
		{
			get
			{
				return this.GetTable<UserType>();
			}
		}
		
		public System.Data.Linq.Table<Payment> Payments
		{
			get
			{
				return this.GetTable<Payment>();
			}
		}
		
		public System.Data.Linq.Table<Schedule> Schedules
		{
			get
			{
				return this.GetTable<Schedule>();
			}
		}
		
		public System.Data.Linq.Table<Schoolyear> Schoolyears
		{
			get
			{
				return this.GetTable<Schoolyear>();
			}
		}
		
		public System.Data.Linq.Table<Section> Sections
		{
			get
			{
				return this.GetTable<Section>();
			}
		}
		
		public System.Data.Linq.Table<Student> Students
		{
			get
			{
				return this.GetTable<Student>();
			}
		}
		
		public System.Data.Linq.Table<StudentGrade> StudentGrades
		{
			get
			{
				return this.GetTable<StudentGrade>();
			}
		}
		
		public System.Data.Linq.Table<StudentPayment> StudentPayments
		{
			get
			{
				return this.GetTable<StudentPayment>();
			}
		}
		
		public System.Data.Linq.Table<Subject> Subjects
		{
			get
			{
				return this.GetTable<Subject>();
			}
		}
		
		public System.Data.Linq.Table<Teacher> Teachers
		{
			get
			{
				return this.GetTable<Teacher>();
			}
		}
		
		public System.Data.Linq.Table<TimeSchedule> TimeSchedules
		{
			get
			{
				return this.GetTable<TimeSchedule>();
			}
		}
		
		public System.Data.Linq.Table<UserAccount> UserAccounts
		{
			get
			{
				return this.GetTable<UserAccount>();
			}
		}
		
		public System.Data.Linq.Table<UserSecurity> UserSecurities
		{
			get
			{
				return this.GetTable<UserSecurity>();
			}
		}
		
		public System.Data.Linq.Table<RequiOfRequirement> RequiOfRequirements
		{
			get
			{
				return this.GetTable<RequiOfRequirement>();
			}
		}
		
		public System.Data.Linq.Table<Book> Books
		{
			get
			{
				return this.GetTable<Book>();
			}
		}
		
		public System.Data.Linq.Table<ProcessBook> ProcessBooks
		{
			get
			{
				return this.GetTable<ProcessBook>();
			}
		}
		
		public System.Data.Linq.Table<Inquiry> Inquiries
		{
			get
			{
				return this.GetTable<Inquiry>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserType")]
	public partial class UserType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserTypeID;
		
		private string _Type;
		
		private EntitySet<UserAccount> _UserAccounts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserTypeIDChanging(int value);
    partial void OnUserTypeIDChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    #endregion
		
		public UserType()
		{
			this._UserAccounts = new EntitySet<UserAccount>(new Action<UserAccount>(this.attach_UserAccounts), new Action<UserAccount>(this.detach_UserAccounts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserTypeID
		{
			get
			{
				return this._UserTypeID;
			}
			set
			{
				if ((this._UserTypeID != value))
				{
					this.OnUserTypeIDChanging(value);
					this.SendPropertyChanging();
					this._UserTypeID = value;
					this.SendPropertyChanged("UserTypeID");
					this.OnUserTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserType_UserAccount", Storage="_UserAccounts", ThisKey="UserTypeID", OtherKey="UserTypeID")]
		public EntitySet<UserAccount> UserAccounts
		{
			get
			{
				return this._UserAccounts;
			}
			set
			{
				this._UserAccounts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserAccounts(UserAccount entity)
		{
			this.SendPropertyChanging();
			entity.UserType = this;
		}
		
		private void detach_UserAccounts(UserAccount entity)
		{
			this.SendPropertyChanging();
			entity.UserType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Payment")]
	public partial class Payment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PaymentID;
		
		private string _Payment1;
		
		private decimal _Amount;
		
		private System.Nullable<int> _SchoolyearID;
		
		private EntityRef<Schoolyear> _Schoolyear;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPaymentIDChanging(int value);
    partial void OnPaymentIDChanged();
    partial void OnPayment1Changing(string value);
    partial void OnPayment1Changed();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnSchoolyearIDChanging(System.Nullable<int> value);
    partial void OnSchoolyearIDChanged();
    #endregion
		
		public Payment()
		{
			this._Schoolyear = default(EntityRef<Schoolyear>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PaymentID
		{
			get
			{
				return this._PaymentID;
			}
			set
			{
				if ((this._PaymentID != value))
				{
					this.OnPaymentIDChanging(value);
					this.SendPropertyChanging();
					this._PaymentID = value;
					this.SendPropertyChanged("PaymentID");
					this.OnPaymentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Payment", Storage="_Payment1", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Payment1
		{
			get
			{
				return this._Payment1;
			}
			set
			{
				if ((this._Payment1 != value))
				{
					this.OnPayment1Changing(value);
					this.SendPropertyChanging();
					this._Payment1 = value;
					this.SendPropertyChanged("Payment1");
					this.OnPayment1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Decimal(6,2) NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchoolyearID", DbType="Int")]
		public System.Nullable<int> SchoolyearID
		{
			get
			{
				return this._SchoolyearID;
			}
			set
			{
				if ((this._SchoolyearID != value))
				{
					if (this._Schoolyear.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSchoolyearIDChanging(value);
					this.SendPropertyChanging();
					this._SchoolyearID = value;
					this.SendPropertyChanged("SchoolyearID");
					this.OnSchoolyearIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Schoolyear_Payment", Storage="_Schoolyear", ThisKey="SchoolyearID", OtherKey="SchoolyearID", IsForeignKey=true)]
		public Schoolyear Schoolyear
		{
			get
			{
				return this._Schoolyear.Entity;
			}
			set
			{
				Schoolyear previousValue = this._Schoolyear.Entity;
				if (((previousValue != value) 
							|| (this._Schoolyear.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Schoolyear.Entity = null;
						previousValue.Payments.Remove(this);
					}
					this._Schoolyear.Entity = value;
					if ((value != null))
					{
						value.Payments.Add(this);
						this._SchoolyearID = value.SchoolyearID;
					}
					else
					{
						this._SchoolyearID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Schoolyear");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Schedule")]
	public partial class Schedule : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ScheduleID;
		
		private System.Nullable<int> _TeacherID;
		
		private System.Nullable<int> _SectionID;
		
		private string _YearLevel;
		
		private System.Nullable<int> _TimeScheduleID;
		
		private EntityRef<Section> _Section;
		
		private EntityRef<Teacher> _Teacher;
		
		private EntityRef<TimeSchedule> _TimeSchedule;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnScheduleIDChanging(int value);
    partial void OnScheduleIDChanged();
    partial void OnTeacherIDChanging(System.Nullable<int> value);
    partial void OnTeacherIDChanged();
    partial void OnSectionIDChanging(System.Nullable<int> value);
    partial void OnSectionIDChanged();
    partial void OnYearLevelChanging(string value);
    partial void OnYearLevelChanged();
    partial void OnTimeScheduleIDChanging(System.Nullable<int> value);
    partial void OnTimeScheduleIDChanged();
    #endregion
		
		public Schedule()
		{
			this._Section = default(EntityRef<Section>);
			this._Teacher = default(EntityRef<Teacher>);
			this._TimeSchedule = default(EntityRef<TimeSchedule>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScheduleID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ScheduleID
		{
			get
			{
				return this._ScheduleID;
			}
			set
			{
				if ((this._ScheduleID != value))
				{
					this.OnScheduleIDChanging(value);
					this.SendPropertyChanging();
					this._ScheduleID = value;
					this.SendPropertyChanged("ScheduleID");
					this.OnScheduleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeacherID", DbType="Int")]
		public System.Nullable<int> TeacherID
		{
			get
			{
				return this._TeacherID;
			}
			set
			{
				if ((this._TeacherID != value))
				{
					if (this._Teacher.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeacherIDChanging(value);
					this.SendPropertyChanging();
					this._TeacherID = value;
					this.SendPropertyChanged("TeacherID");
					this.OnTeacherIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SectionID", DbType="Int")]
		public System.Nullable<int> SectionID
		{
			get
			{
				return this._SectionID;
			}
			set
			{
				if ((this._SectionID != value))
				{
					if (this._Section.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSectionIDChanging(value);
					this.SendPropertyChanging();
					this._SectionID = value;
					this.SendPropertyChanged("SectionID");
					this.OnSectionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YearLevel", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string YearLevel
		{
			get
			{
				return this._YearLevel;
			}
			set
			{
				if ((this._YearLevel != value))
				{
					this.OnYearLevelChanging(value);
					this.SendPropertyChanging();
					this._YearLevel = value;
					this.SendPropertyChanged("YearLevel");
					this.OnYearLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeScheduleID", DbType="Int")]
		public System.Nullable<int> TimeScheduleID
		{
			get
			{
				return this._TimeScheduleID;
			}
			set
			{
				if ((this._TimeScheduleID != value))
				{
					if (this._TimeSchedule.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTimeScheduleIDChanging(value);
					this.SendPropertyChanging();
					this._TimeScheduleID = value;
					this.SendPropertyChanged("TimeScheduleID");
					this.OnTimeScheduleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Section_Schedule", Storage="_Section", ThisKey="SectionID", OtherKey="SectionID", IsForeignKey=true)]
		public Section Section
		{
			get
			{
				return this._Section.Entity;
			}
			set
			{
				Section previousValue = this._Section.Entity;
				if (((previousValue != value) 
							|| (this._Section.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Section.Entity = null;
						previousValue.Schedules.Remove(this);
					}
					this._Section.Entity = value;
					if ((value != null))
					{
						value.Schedules.Add(this);
						this._SectionID = value.SectionID;
					}
					else
					{
						this._SectionID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Section");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Teacher_Schedule", Storage="_Teacher", ThisKey="TeacherID", OtherKey="TeacherID", IsForeignKey=true)]
		public Teacher Teacher
		{
			get
			{
				return this._Teacher.Entity;
			}
			set
			{
				Teacher previousValue = this._Teacher.Entity;
				if (((previousValue != value) 
							|| (this._Teacher.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Teacher.Entity = null;
						previousValue.Schedules.Remove(this);
					}
					this._Teacher.Entity = value;
					if ((value != null))
					{
						value.Schedules.Add(this);
						this._TeacherID = value.TeacherID;
					}
					else
					{
						this._TeacherID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Teacher");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TimeSchedule_Schedule", Storage="_TimeSchedule", ThisKey="TimeScheduleID", OtherKey="TimeScheduleID", IsForeignKey=true)]
		public TimeSchedule TimeSchedule
		{
			get
			{
				return this._TimeSchedule.Entity;
			}
			set
			{
				TimeSchedule previousValue = this._TimeSchedule.Entity;
				if (((previousValue != value) 
							|| (this._TimeSchedule.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TimeSchedule.Entity = null;
						previousValue.Schedules.Remove(this);
					}
					this._TimeSchedule.Entity = value;
					if ((value != null))
					{
						value.Schedules.Add(this);
						this._TimeScheduleID = value.TimeScheduleID;
					}
					else
					{
						this._TimeScheduleID = default(Nullable<int>);
					}
					this.SendPropertyChanged("TimeSchedule");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Schoolyear")]
	public partial class Schoolyear : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SchoolyearID;
		
		private string _Year;
		
		private EntitySet<Payment> _Payments;
		
		private EntitySet<Student> _Students;
		
		private EntitySet<StudentGrade> _StudentGrades;
		
		private EntitySet<RequiOfRequirement> _RequiOfRequirements;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSchoolyearIDChanging(int value);
    partial void OnSchoolyearIDChanged();
    partial void OnYearChanging(string value);
    partial void OnYearChanged();
    #endregion
		
		public Schoolyear()
		{
			this._Payments = new EntitySet<Payment>(new Action<Payment>(this.attach_Payments), new Action<Payment>(this.detach_Payments));
			this._Students = new EntitySet<Student>(new Action<Student>(this.attach_Students), new Action<Student>(this.detach_Students));
			this._StudentGrades = new EntitySet<StudentGrade>(new Action<StudentGrade>(this.attach_StudentGrades), new Action<StudentGrade>(this.detach_StudentGrades));
			this._RequiOfRequirements = new EntitySet<RequiOfRequirement>(new Action<RequiOfRequirement>(this.attach_RequiOfRequirements), new Action<RequiOfRequirement>(this.detach_RequiOfRequirements));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchoolyearID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SchoolyearID
		{
			get
			{
				return this._SchoolyearID;
			}
			set
			{
				if ((this._SchoolyearID != value))
				{
					this.OnSchoolyearIDChanging(value);
					this.SendPropertyChanging();
					this._SchoolyearID = value;
					this.SendPropertyChanged("SchoolyearID");
					this.OnSchoolyearIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Year", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					this.OnYearChanging(value);
					this.SendPropertyChanging();
					this._Year = value;
					this.SendPropertyChanged("Year");
					this.OnYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Schoolyear_Payment", Storage="_Payments", ThisKey="SchoolyearID", OtherKey="SchoolyearID")]
		public EntitySet<Payment> Payments
		{
			get
			{
				return this._Payments;
			}
			set
			{
				this._Payments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Schoolyear_Student", Storage="_Students", ThisKey="SchoolyearID", OtherKey="SchoolyearID")]
		public EntitySet<Student> Students
		{
			get
			{
				return this._Students;
			}
			set
			{
				this._Students.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Schoolyear_StudentGrade", Storage="_StudentGrades", ThisKey="SchoolyearID", OtherKey="SchoolyearID")]
		public EntitySet<StudentGrade> StudentGrades
		{
			get
			{
				return this._StudentGrades;
			}
			set
			{
				this._StudentGrades.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Schoolyear_RequiOfRequirement", Storage="_RequiOfRequirements", ThisKey="SchoolyearID", OtherKey="SchoolyearID")]
		public EntitySet<RequiOfRequirement> RequiOfRequirements
		{
			get
			{
				return this._RequiOfRequirements;
			}
			set
			{
				this._RequiOfRequirements.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Payments(Payment entity)
		{
			this.SendPropertyChanging();
			entity.Schoolyear = this;
		}
		
		private void detach_Payments(Payment entity)
		{
			this.SendPropertyChanging();
			entity.Schoolyear = null;
		}
		
		private void attach_Students(Student entity)
		{
			this.SendPropertyChanging();
			entity.Schoolyear = this;
		}
		
		private void detach_Students(Student entity)
		{
			this.SendPropertyChanging();
			entity.Schoolyear = null;
		}
		
		private void attach_StudentGrades(StudentGrade entity)
		{
			this.SendPropertyChanging();
			entity.Schoolyear = this;
		}
		
		private void detach_StudentGrades(StudentGrade entity)
		{
			this.SendPropertyChanging();
			entity.Schoolyear = null;
		}
		
		private void attach_RequiOfRequirements(RequiOfRequirement entity)
		{
			this.SendPropertyChanging();
			entity.Schoolyear = this;
		}
		
		private void detach_RequiOfRequirements(RequiOfRequirement entity)
		{
			this.SendPropertyChanging();
			entity.Schoolyear = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Section")]
	public partial class Section : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SectionID;
		
		private string _Section1;
		
		private int _Capacity;
		
		private string _YearLevel;
		
		private System.Nullable<int> _TeacherID;
		
		private EntitySet<Schedule> _Schedules;
		
		private EntitySet<Student> _Students;
		
		private EntityRef<Teacher> _Teacher;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSectionIDChanging(int value);
    partial void OnSectionIDChanged();
    partial void OnSection1Changing(string value);
    partial void OnSection1Changed();
    partial void OnCapacityChanging(int value);
    partial void OnCapacityChanged();
    partial void OnYearLevelChanging(string value);
    partial void OnYearLevelChanged();
    partial void OnTeacherIDChanging(System.Nullable<int> value);
    partial void OnTeacherIDChanged();
    #endregion
		
		public Section()
		{
			this._Schedules = new EntitySet<Schedule>(new Action<Schedule>(this.attach_Schedules), new Action<Schedule>(this.detach_Schedules));
			this._Students = new EntitySet<Student>(new Action<Student>(this.attach_Students), new Action<Student>(this.detach_Students));
			this._Teacher = default(EntityRef<Teacher>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SectionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SectionID
		{
			get
			{
				return this._SectionID;
			}
			set
			{
				if ((this._SectionID != value))
				{
					this.OnSectionIDChanging(value);
					this.SendPropertyChanging();
					this._SectionID = value;
					this.SendPropertyChanged("SectionID");
					this.OnSectionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Section", Storage="_Section1", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Section1
		{
			get
			{
				return this._Section1;
			}
			set
			{
				if ((this._Section1 != value))
				{
					this.OnSection1Changing(value);
					this.SendPropertyChanging();
					this._Section1 = value;
					this.SendPropertyChanged("Section1");
					this.OnSection1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Capacity", DbType="Int NOT NULL")]
		public int Capacity
		{
			get
			{
				return this._Capacity;
			}
			set
			{
				if ((this._Capacity != value))
				{
					this.OnCapacityChanging(value);
					this.SendPropertyChanging();
					this._Capacity = value;
					this.SendPropertyChanged("Capacity");
					this.OnCapacityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YearLevel", DbType="VarChar(50)")]
		public string YearLevel
		{
			get
			{
				return this._YearLevel;
			}
			set
			{
				if ((this._YearLevel != value))
				{
					this.OnYearLevelChanging(value);
					this.SendPropertyChanging();
					this._YearLevel = value;
					this.SendPropertyChanged("YearLevel");
					this.OnYearLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeacherID", DbType="Int")]
		public System.Nullable<int> TeacherID
		{
			get
			{
				return this._TeacherID;
			}
			set
			{
				if ((this._TeacherID != value))
				{
					if (this._Teacher.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeacherIDChanging(value);
					this.SendPropertyChanging();
					this._TeacherID = value;
					this.SendPropertyChanged("TeacherID");
					this.OnTeacherIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Section_Schedule", Storage="_Schedules", ThisKey="SectionID", OtherKey="SectionID")]
		public EntitySet<Schedule> Schedules
		{
			get
			{
				return this._Schedules;
			}
			set
			{
				this._Schedules.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Section_Student", Storage="_Students", ThisKey="SectionID", OtherKey="SectionID")]
		public EntitySet<Student> Students
		{
			get
			{
				return this._Students;
			}
			set
			{
				this._Students.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Teacher_Section", Storage="_Teacher", ThisKey="TeacherID", OtherKey="TeacherID", IsForeignKey=true)]
		public Teacher Teacher
		{
			get
			{
				return this._Teacher.Entity;
			}
			set
			{
				Teacher previousValue = this._Teacher.Entity;
				if (((previousValue != value) 
							|| (this._Teacher.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Teacher.Entity = null;
						previousValue.Sections.Remove(this);
					}
					this._Teacher.Entity = value;
					if ((value != null))
					{
						value.Sections.Add(this);
						this._TeacherID = value.TeacherID;
					}
					else
					{
						this._TeacherID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Teacher");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Schedules(Schedule entity)
		{
			this.SendPropertyChanging();
			entity.Section = this;
		}
		
		private void detach_Schedules(Schedule entity)
		{
			this.SendPropertyChanging();
			entity.Section = null;
		}
		
		private void attach_Students(Student entity)
		{
			this.SendPropertyChanging();
			entity.Section = this;
		}
		
		private void detach_Students(Student entity)
		{
			this.SendPropertyChanging();
			entity.Section = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Student")]
	public partial class Student : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StudentID;
		
		private string _Firstname;
		
		private string _Middlname;
		
		private string _Lastname;
		
		private System.DateTime _Birthdate;
		
		private int _Age;
		
		private string _Address;
		
		private string _Gender;
		
		private string _ParentName;
		
		private string _ParentNo;
		
		private string _Occupation;
		
		private decimal _Height;
		
		private decimal _Weight;
		
		private int _Systolic;
		
		private int _Diastolic;
		
		private string _Form137;
		
		private string _Form138;
		
		private string _GoodMoral;
		
		private string _NSO;
		
		private string _YearLevel;
		
		private System.Nullable<int> _SectionID;
		
		private System.Nullable<int> _SchoolyearID;
		
		private EntitySet<StudentGrade> _StudentGrades;
		
		private EntitySet<StudentPayment> _StudentPayments;
		
		private EntitySet<RequiOfRequirement> _RequiOfRequirements;
		
		private EntitySet<ProcessBook> _ProcessBooks;
		
		private EntityRef<Schoolyear> _Schoolyear;
		
		private EntityRef<Section> _Section;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStudentIDChanging(int value);
    partial void OnStudentIDChanged();
    partial void OnFirstnameChanging(string value);
    partial void OnFirstnameChanged();
    partial void OnMiddlnameChanging(string value);
    partial void OnMiddlnameChanged();
    partial void OnLastnameChanging(string value);
    partial void OnLastnameChanged();
    partial void OnBirthdateChanging(System.DateTime value);
    partial void OnBirthdateChanged();
    partial void OnAgeChanging(int value);
    partial void OnAgeChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnGenderChanging(string value);
    partial void OnGenderChanged();
    partial void OnParentNameChanging(string value);
    partial void OnParentNameChanged();
    partial void OnParentNoChanging(string value);
    partial void OnParentNoChanged();
    partial void OnOccupationChanging(string value);
    partial void OnOccupationChanged();
    partial void OnHeightChanging(decimal value);
    partial void OnHeightChanged();
    partial void OnWeightChanging(decimal value);
    partial void OnWeightChanged();
    partial void OnSystolicChanging(int value);
    partial void OnSystolicChanged();
    partial void OnDiastolicChanging(int value);
    partial void OnDiastolicChanged();
    partial void OnForm137Changing(string value);
    partial void OnForm137Changed();
    partial void OnForm138Changing(string value);
    partial void OnForm138Changed();
    partial void OnGoodMoralChanging(string value);
    partial void OnGoodMoralChanged();
    partial void OnNSOChanging(string value);
    partial void OnNSOChanged();
    partial void OnYearLevelChanging(string value);
    partial void OnYearLevelChanged();
    partial void OnSectionIDChanging(System.Nullable<int> value);
    partial void OnSectionIDChanged();
    partial void OnSchoolyearIDChanging(System.Nullable<int> value);
    partial void OnSchoolyearIDChanged();
    #endregion
		
		public Student()
		{
			this._StudentGrades = new EntitySet<StudentGrade>(new Action<StudentGrade>(this.attach_StudentGrades), new Action<StudentGrade>(this.detach_StudentGrades));
			this._StudentPayments = new EntitySet<StudentPayment>(new Action<StudentPayment>(this.attach_StudentPayments), new Action<StudentPayment>(this.detach_StudentPayments));
			this._RequiOfRequirements = new EntitySet<RequiOfRequirement>(new Action<RequiOfRequirement>(this.attach_RequiOfRequirements), new Action<RequiOfRequirement>(this.detach_RequiOfRequirements));
			this._ProcessBooks = new EntitySet<ProcessBook>(new Action<ProcessBook>(this.attach_ProcessBooks), new Action<ProcessBook>(this.detach_ProcessBooks));
			this._Schoolyear = default(EntityRef<Schoolyear>);
			this._Section = default(EntityRef<Section>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StudentID
		{
			get
			{
				return this._StudentID;
			}
			set
			{
				if ((this._StudentID != value))
				{
					this.OnStudentIDChanging(value);
					this.SendPropertyChanging();
					this._StudentID = value;
					this.SendPropertyChanged("StudentID");
					this.OnStudentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Firstname", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Firstname
		{
			get
			{
				return this._Firstname;
			}
			set
			{
				if ((this._Firstname != value))
				{
					this.OnFirstnameChanging(value);
					this.SendPropertyChanging();
					this._Firstname = value;
					this.SendPropertyChanged("Firstname");
					this.OnFirstnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Middlname", DbType="VarChar(50)")]
		public string Middlname
		{
			get
			{
				return this._Middlname;
			}
			set
			{
				if ((this._Middlname != value))
				{
					this.OnMiddlnameChanging(value);
					this.SendPropertyChanging();
					this._Middlname = value;
					this.SendPropertyChanged("Middlname");
					this.OnMiddlnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lastname", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Lastname
		{
			get
			{
				return this._Lastname;
			}
			set
			{
				if ((this._Lastname != value))
				{
					this.OnLastnameChanging(value);
					this.SendPropertyChanging();
					this._Lastname = value;
					this.SendPropertyChanged("Lastname");
					this.OnLastnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Birthdate", DbType="Date NOT NULL")]
		public System.DateTime Birthdate
		{
			get
			{
				return this._Birthdate;
			}
			set
			{
				if ((this._Birthdate != value))
				{
					this.OnBirthdateChanging(value);
					this.SendPropertyChanging();
					this._Birthdate = value;
					this.SendPropertyChanged("Birthdate");
					this.OnBirthdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Age", DbType="Int NOT NULL")]
		public int Age
		{
			get
			{
				return this._Age;
			}
			set
			{
				if ((this._Age != value))
				{
					this.OnAgeChanging(value);
					this.SendPropertyChanging();
					this._Age = value;
					this.SendPropertyChanged("Age");
					this.OnAgeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentName", DbType="VarChar(150) NOT NULL", CanBeNull=false)]
		public string ParentName
		{
			get
			{
				return this._ParentName;
			}
			set
			{
				if ((this._ParentName != value))
				{
					this.OnParentNameChanging(value);
					this.SendPropertyChanging();
					this._ParentName = value;
					this.SendPropertyChanged("ParentName");
					this.OnParentNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentNo", DbType="VarChar(50)")]
		public string ParentNo
		{
			get
			{
				return this._ParentNo;
			}
			set
			{
				if ((this._ParentNo != value))
				{
					this.OnParentNoChanging(value);
					this.SendPropertyChanging();
					this._ParentNo = value;
					this.SendPropertyChanged("ParentNo");
					this.OnParentNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Occupation", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Occupation
		{
			get
			{
				return this._Occupation;
			}
			set
			{
				if ((this._Occupation != value))
				{
					this.OnOccupationChanging(value);
					this.SendPropertyChanging();
					this._Occupation = value;
					this.SendPropertyChanged("Occupation");
					this.OnOccupationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Height", DbType="Decimal(5,2) NOT NULL")]
		public decimal Height
		{
			get
			{
				return this._Height;
			}
			set
			{
				if ((this._Height != value))
				{
					this.OnHeightChanging(value);
					this.SendPropertyChanging();
					this._Height = value;
					this.SendPropertyChanged("Height");
					this.OnHeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Weight", DbType="Decimal(5,2) NOT NULL")]
		public decimal Weight
		{
			get
			{
				return this._Weight;
			}
			set
			{
				if ((this._Weight != value))
				{
					this.OnWeightChanging(value);
					this.SendPropertyChanging();
					this._Weight = value;
					this.SendPropertyChanged("Weight");
					this.OnWeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Systolic", DbType="Int NOT NULL")]
		public int Systolic
		{
			get
			{
				return this._Systolic;
			}
			set
			{
				if ((this._Systolic != value))
				{
					this.OnSystolicChanging(value);
					this.SendPropertyChanging();
					this._Systolic = value;
					this.SendPropertyChanged("Systolic");
					this.OnSystolicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Diastolic", DbType="Int NOT NULL")]
		public int Diastolic
		{
			get
			{
				return this._Diastolic;
			}
			set
			{
				if ((this._Diastolic != value))
				{
					this.OnDiastolicChanging(value);
					this.SendPropertyChanging();
					this._Diastolic = value;
					this.SendPropertyChanged("Diastolic");
					this.OnDiastolicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Form137", DbType="VarChar(50)")]
		public string Form137
		{
			get
			{
				return this._Form137;
			}
			set
			{
				if ((this._Form137 != value))
				{
					this.OnForm137Changing(value);
					this.SendPropertyChanging();
					this._Form137 = value;
					this.SendPropertyChanged("Form137");
					this.OnForm137Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Form138", DbType="VarChar(50)")]
		public string Form138
		{
			get
			{
				return this._Form138;
			}
			set
			{
				if ((this._Form138 != value))
				{
					this.OnForm138Changing(value);
					this.SendPropertyChanging();
					this._Form138 = value;
					this.SendPropertyChanged("Form138");
					this.OnForm138Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GoodMoral", DbType="VarChar(50)")]
		public string GoodMoral
		{
			get
			{
				return this._GoodMoral;
			}
			set
			{
				if ((this._GoodMoral != value))
				{
					this.OnGoodMoralChanging(value);
					this.SendPropertyChanging();
					this._GoodMoral = value;
					this.SendPropertyChanged("GoodMoral");
					this.OnGoodMoralChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NSO", DbType="VarChar(50)")]
		public string NSO
		{
			get
			{
				return this._NSO;
			}
			set
			{
				if ((this._NSO != value))
				{
					this.OnNSOChanging(value);
					this.SendPropertyChanging();
					this._NSO = value;
					this.SendPropertyChanged("NSO");
					this.OnNSOChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YearLevel", DbType="VarChar(50)")]
		public string YearLevel
		{
			get
			{
				return this._YearLevel;
			}
			set
			{
				if ((this._YearLevel != value))
				{
					this.OnYearLevelChanging(value);
					this.SendPropertyChanging();
					this._YearLevel = value;
					this.SendPropertyChanged("YearLevel");
					this.OnYearLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SectionID", DbType="Int")]
		public System.Nullable<int> SectionID
		{
			get
			{
				return this._SectionID;
			}
			set
			{
				if ((this._SectionID != value))
				{
					if (this._Section.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSectionIDChanging(value);
					this.SendPropertyChanging();
					this._SectionID = value;
					this.SendPropertyChanged("SectionID");
					this.OnSectionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchoolyearID", DbType="Int")]
		public System.Nullable<int> SchoolyearID
		{
			get
			{
				return this._SchoolyearID;
			}
			set
			{
				if ((this._SchoolyearID != value))
				{
					if (this._Schoolyear.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSchoolyearIDChanging(value);
					this.SendPropertyChanging();
					this._SchoolyearID = value;
					this.SendPropertyChanged("SchoolyearID");
					this.OnSchoolyearIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_StudentGrade", Storage="_StudentGrades", ThisKey="StudentID", OtherKey="StudentID")]
		public EntitySet<StudentGrade> StudentGrades
		{
			get
			{
				return this._StudentGrades;
			}
			set
			{
				this._StudentGrades.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_StudentPayment", Storage="_StudentPayments", ThisKey="StudentID", OtherKey="StudentID")]
		public EntitySet<StudentPayment> StudentPayments
		{
			get
			{
				return this._StudentPayments;
			}
			set
			{
				this._StudentPayments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_RequiOfRequirement", Storage="_RequiOfRequirements", ThisKey="StudentID", OtherKey="StudentID")]
		public EntitySet<RequiOfRequirement> RequiOfRequirements
		{
			get
			{
				return this._RequiOfRequirements;
			}
			set
			{
				this._RequiOfRequirements.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_ProcessBook", Storage="_ProcessBooks", ThisKey="StudentID", OtherKey="StudentID")]
		public EntitySet<ProcessBook> ProcessBooks
		{
			get
			{
				return this._ProcessBooks;
			}
			set
			{
				this._ProcessBooks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Schoolyear_Student", Storage="_Schoolyear", ThisKey="SchoolyearID", OtherKey="SchoolyearID", IsForeignKey=true)]
		public Schoolyear Schoolyear
		{
			get
			{
				return this._Schoolyear.Entity;
			}
			set
			{
				Schoolyear previousValue = this._Schoolyear.Entity;
				if (((previousValue != value) 
							|| (this._Schoolyear.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Schoolyear.Entity = null;
						previousValue.Students.Remove(this);
					}
					this._Schoolyear.Entity = value;
					if ((value != null))
					{
						value.Students.Add(this);
						this._SchoolyearID = value.SchoolyearID;
					}
					else
					{
						this._SchoolyearID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Schoolyear");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Section_Student", Storage="_Section", ThisKey="SectionID", OtherKey="SectionID", IsForeignKey=true)]
		public Section Section
		{
			get
			{
				return this._Section.Entity;
			}
			set
			{
				Section previousValue = this._Section.Entity;
				if (((previousValue != value) 
							|| (this._Section.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Section.Entity = null;
						previousValue.Students.Remove(this);
					}
					this._Section.Entity = value;
					if ((value != null))
					{
						value.Students.Add(this);
						this._SectionID = value.SectionID;
					}
					else
					{
						this._SectionID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Section");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StudentGrades(StudentGrade entity)
		{
			this.SendPropertyChanging();
			entity.Student = this;
		}
		
		private void detach_StudentGrades(StudentGrade entity)
		{
			this.SendPropertyChanging();
			entity.Student = null;
		}
		
		private void attach_StudentPayments(StudentPayment entity)
		{
			this.SendPropertyChanging();
			entity.Student = this;
		}
		
		private void detach_StudentPayments(StudentPayment entity)
		{
			this.SendPropertyChanging();
			entity.Student = null;
		}
		
		private void attach_RequiOfRequirements(RequiOfRequirement entity)
		{
			this.SendPropertyChanging();
			entity.Student = this;
		}
		
		private void detach_RequiOfRequirements(RequiOfRequirement entity)
		{
			this.SendPropertyChanging();
			entity.Student = null;
		}
		
		private void attach_ProcessBooks(ProcessBook entity)
		{
			this.SendPropertyChanging();
			entity.Student = this;
		}
		
		private void detach_ProcessBooks(ProcessBook entity)
		{
			this.SendPropertyChanging();
			entity.Student = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StudentGrade")]
	public partial class StudentGrade : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StudentGradeID;
		
		private System.Nullable<int> _StudentID;
		
		private System.Nullable<int> _SubjectID;
		
		private decimal _Grade;
		
		private string _YearLevel;
		
		private string _Period;
		
		private System.Nullable<int> _SchoolyearID;
		
		private EntityRef<Schoolyear> _Schoolyear;
		
		private EntityRef<Student> _Student;
		
		private EntityRef<Subject> _Subject;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStudentGradeIDChanging(int value);
    partial void OnStudentGradeIDChanged();
    partial void OnStudentIDChanging(System.Nullable<int> value);
    partial void OnStudentIDChanged();
    partial void OnSubjectIDChanging(System.Nullable<int> value);
    partial void OnSubjectIDChanged();
    partial void OnGradeChanging(decimal value);
    partial void OnGradeChanged();
    partial void OnYearLevelChanging(string value);
    partial void OnYearLevelChanged();
    partial void OnPeriodChanging(string value);
    partial void OnPeriodChanged();
    partial void OnSchoolyearIDChanging(System.Nullable<int> value);
    partial void OnSchoolyearIDChanged();
    #endregion
		
		public StudentGrade()
		{
			this._Schoolyear = default(EntityRef<Schoolyear>);
			this._Student = default(EntityRef<Student>);
			this._Subject = default(EntityRef<Subject>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentGradeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StudentGradeID
		{
			get
			{
				return this._StudentGradeID;
			}
			set
			{
				if ((this._StudentGradeID != value))
				{
					this.OnStudentGradeIDChanging(value);
					this.SendPropertyChanging();
					this._StudentGradeID = value;
					this.SendPropertyChanged("StudentGradeID");
					this.OnStudentGradeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentID", DbType="Int")]
		public System.Nullable<int> StudentID
		{
			get
			{
				return this._StudentID;
			}
			set
			{
				if ((this._StudentID != value))
				{
					if (this._Student.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudentIDChanging(value);
					this.SendPropertyChanging();
					this._StudentID = value;
					this.SendPropertyChanged("StudentID");
					this.OnStudentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubjectID", DbType="Int")]
		public System.Nullable<int> SubjectID
		{
			get
			{
				return this._SubjectID;
			}
			set
			{
				if ((this._SubjectID != value))
				{
					if (this._Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubjectIDChanging(value);
					this.SendPropertyChanging();
					this._SubjectID = value;
					this.SendPropertyChanged("SubjectID");
					this.OnSubjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Grade", DbType="Decimal(5,1) NOT NULL")]
		public decimal Grade
		{
			get
			{
				return this._Grade;
			}
			set
			{
				if ((this._Grade != value))
				{
					this.OnGradeChanging(value);
					this.SendPropertyChanging();
					this._Grade = value;
					this.SendPropertyChanged("Grade");
					this.OnGradeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YearLevel", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string YearLevel
		{
			get
			{
				return this._YearLevel;
			}
			set
			{
				if ((this._YearLevel != value))
				{
					this.OnYearLevelChanging(value);
					this.SendPropertyChanging();
					this._YearLevel = value;
					this.SendPropertyChanged("YearLevel");
					this.OnYearLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Period", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Period
		{
			get
			{
				return this._Period;
			}
			set
			{
				if ((this._Period != value))
				{
					this.OnPeriodChanging(value);
					this.SendPropertyChanging();
					this._Period = value;
					this.SendPropertyChanged("Period");
					this.OnPeriodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchoolyearID", DbType="Int")]
		public System.Nullable<int> SchoolyearID
		{
			get
			{
				return this._SchoolyearID;
			}
			set
			{
				if ((this._SchoolyearID != value))
				{
					if (this._Schoolyear.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSchoolyearIDChanging(value);
					this.SendPropertyChanging();
					this._SchoolyearID = value;
					this.SendPropertyChanged("SchoolyearID");
					this.OnSchoolyearIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Schoolyear_StudentGrade", Storage="_Schoolyear", ThisKey="SchoolyearID", OtherKey="SchoolyearID", IsForeignKey=true)]
		public Schoolyear Schoolyear
		{
			get
			{
				return this._Schoolyear.Entity;
			}
			set
			{
				Schoolyear previousValue = this._Schoolyear.Entity;
				if (((previousValue != value) 
							|| (this._Schoolyear.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Schoolyear.Entity = null;
						previousValue.StudentGrades.Remove(this);
					}
					this._Schoolyear.Entity = value;
					if ((value != null))
					{
						value.StudentGrades.Add(this);
						this._SchoolyearID = value.SchoolyearID;
					}
					else
					{
						this._SchoolyearID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Schoolyear");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_StudentGrade", Storage="_Student", ThisKey="StudentID", OtherKey="StudentID", IsForeignKey=true)]
		public Student Student
		{
			get
			{
				return this._Student.Entity;
			}
			set
			{
				Student previousValue = this._Student.Entity;
				if (((previousValue != value) 
							|| (this._Student.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Student.Entity = null;
						previousValue.StudentGrades.Remove(this);
					}
					this._Student.Entity = value;
					if ((value != null))
					{
						value.StudentGrades.Add(this);
						this._StudentID = value.StudentID;
					}
					else
					{
						this._StudentID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Student");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_StudentGrade", Storage="_Subject", ThisKey="SubjectID", OtherKey="SubjectID", IsForeignKey=true)]
		public Subject Subject
		{
			get
			{
				return this._Subject.Entity;
			}
			set
			{
				Subject previousValue = this._Subject.Entity;
				if (((previousValue != value) 
							|| (this._Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subject.Entity = null;
						previousValue.StudentGrades.Remove(this);
					}
					this._Subject.Entity = value;
					if ((value != null))
					{
						value.StudentGrades.Add(this);
						this._SubjectID = value.SubjectID;
					}
					else
					{
						this._SubjectID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Subject");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StudentPayment")]
	public partial class StudentPayment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StudentPaymentID;
		
		private System.Nullable<int> _StudentID;
		
		private decimal _Amount;
		
		private string _PaymentType;
		
		private System.DateTime _Date;
		
		private EntityRef<Student> _Student;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStudentPaymentIDChanging(int value);
    partial void OnStudentPaymentIDChanged();
    partial void OnStudentIDChanging(System.Nullable<int> value);
    partial void OnStudentIDChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnPaymentTypeChanging(string value);
    partial void OnPaymentTypeChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    #endregion
		
		public StudentPayment()
		{
			this._Student = default(EntityRef<Student>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentPaymentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StudentPaymentID
		{
			get
			{
				return this._StudentPaymentID;
			}
			set
			{
				if ((this._StudentPaymentID != value))
				{
					this.OnStudentPaymentIDChanging(value);
					this.SendPropertyChanging();
					this._StudentPaymentID = value;
					this.SendPropertyChanged("StudentPaymentID");
					this.OnStudentPaymentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentID", DbType="Int")]
		public System.Nullable<int> StudentID
		{
			get
			{
				return this._StudentID;
			}
			set
			{
				if ((this._StudentID != value))
				{
					if (this._Student.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudentIDChanging(value);
					this.SendPropertyChanging();
					this._StudentID = value;
					this.SendPropertyChanged("StudentID");
					this.OnStudentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Decimal(6,2) NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentType", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string PaymentType
		{
			get
			{
				return this._PaymentType;
			}
			set
			{
				if ((this._PaymentType != value))
				{
					this.OnPaymentTypeChanging(value);
					this.SendPropertyChanging();
					this._PaymentType = value;
					this.SendPropertyChanged("PaymentType");
					this.OnPaymentTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_StudentPayment", Storage="_Student", ThisKey="StudentID", OtherKey="StudentID", IsForeignKey=true)]
		public Student Student
		{
			get
			{
				return this._Student.Entity;
			}
			set
			{
				Student previousValue = this._Student.Entity;
				if (((previousValue != value) 
							|| (this._Student.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Student.Entity = null;
						previousValue.StudentPayments.Remove(this);
					}
					this._Student.Entity = value;
					if ((value != null))
					{
						value.StudentPayments.Add(this);
						this._StudentID = value.StudentID;
					}
					else
					{
						this._StudentID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Student");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Subject")]
	public partial class Subject : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SubjectID;
		
		private string _Subject1;
		
		private string _YearLevel;
		
		private EntitySet<StudentGrade> _StudentGrades;
		
		private EntitySet<Teacher> _Teachers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSubjectIDChanging(int value);
    partial void OnSubjectIDChanged();
    partial void OnSubject1Changing(string value);
    partial void OnSubject1Changed();
    partial void OnYearLevelChanging(string value);
    partial void OnYearLevelChanged();
    #endregion
		
		public Subject()
		{
			this._StudentGrades = new EntitySet<StudentGrade>(new Action<StudentGrade>(this.attach_StudentGrades), new Action<StudentGrade>(this.detach_StudentGrades));
			this._Teachers = new EntitySet<Teacher>(new Action<Teacher>(this.attach_Teachers), new Action<Teacher>(this.detach_Teachers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubjectID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SubjectID
		{
			get
			{
				return this._SubjectID;
			}
			set
			{
				if ((this._SubjectID != value))
				{
					this.OnSubjectIDChanging(value);
					this.SendPropertyChanging();
					this._SubjectID = value;
					this.SendPropertyChanged("SubjectID");
					this.OnSubjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Subject", Storage="_Subject1", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Subject1
		{
			get
			{
				return this._Subject1;
			}
			set
			{
				if ((this._Subject1 != value))
				{
					this.OnSubject1Changing(value);
					this.SendPropertyChanging();
					this._Subject1 = value;
					this.SendPropertyChanged("Subject1");
					this.OnSubject1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YearLevel", DbType="VarChar(50)")]
		public string YearLevel
		{
			get
			{
				return this._YearLevel;
			}
			set
			{
				if ((this._YearLevel != value))
				{
					this.OnYearLevelChanging(value);
					this.SendPropertyChanging();
					this._YearLevel = value;
					this.SendPropertyChanged("YearLevel");
					this.OnYearLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_StudentGrade", Storage="_StudentGrades", ThisKey="SubjectID", OtherKey="SubjectID")]
		public EntitySet<StudentGrade> StudentGrades
		{
			get
			{
				return this._StudentGrades;
			}
			set
			{
				this._StudentGrades.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_Teacher", Storage="_Teachers", ThisKey="SubjectID", OtherKey="SubjectID")]
		public EntitySet<Teacher> Teachers
		{
			get
			{
				return this._Teachers;
			}
			set
			{
				this._Teachers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StudentGrades(StudentGrade entity)
		{
			this.SendPropertyChanging();
			entity.Subject = this;
		}
		
		private void detach_StudentGrades(StudentGrade entity)
		{
			this.SendPropertyChanging();
			entity.Subject = null;
		}
		
		private void attach_Teachers(Teacher entity)
		{
			this.SendPropertyChanging();
			entity.Subject = this;
		}
		
		private void detach_Teachers(Teacher entity)
		{
			this.SendPropertyChanging();
			entity.Subject = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Teacher")]
	public partial class Teacher : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TeacherID;
		
		private string _Firstname;
		
		private string _Middlename;
		
		private string _Lastname;
		
		private string _ContactNumber;
		
		private string _Status;
		
		private System.Nullable<int> _SubjectID;
		
		private EntitySet<Schedule> _Schedules;
		
		private EntitySet<Section> _Sections;
		
		private EntityRef<Subject> _Subject;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTeacherIDChanging(int value);
    partial void OnTeacherIDChanged();
    partial void OnFirstnameChanging(string value);
    partial void OnFirstnameChanged();
    partial void OnMiddlenameChanging(string value);
    partial void OnMiddlenameChanged();
    partial void OnLastnameChanging(string value);
    partial void OnLastnameChanged();
    partial void OnContactNumberChanging(string value);
    partial void OnContactNumberChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnSubjectIDChanging(System.Nullable<int> value);
    partial void OnSubjectIDChanged();
    #endregion
		
		public Teacher()
		{
			this._Schedules = new EntitySet<Schedule>(new Action<Schedule>(this.attach_Schedules), new Action<Schedule>(this.detach_Schedules));
			this._Sections = new EntitySet<Section>(new Action<Section>(this.attach_Sections), new Action<Section>(this.detach_Sections));
			this._Subject = default(EntityRef<Subject>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeacherID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TeacherID
		{
			get
			{
				return this._TeacherID;
			}
			set
			{
				if ((this._TeacherID != value))
				{
					this.OnTeacherIDChanging(value);
					this.SendPropertyChanging();
					this._TeacherID = value;
					this.SendPropertyChanged("TeacherID");
					this.OnTeacherIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Firstname", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Firstname
		{
			get
			{
				return this._Firstname;
			}
			set
			{
				if ((this._Firstname != value))
				{
					this.OnFirstnameChanging(value);
					this.SendPropertyChanging();
					this._Firstname = value;
					this.SendPropertyChanged("Firstname");
					this.OnFirstnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Middlename", DbType="VarChar(50)")]
		public string Middlename
		{
			get
			{
				return this._Middlename;
			}
			set
			{
				if ((this._Middlename != value))
				{
					this.OnMiddlenameChanging(value);
					this.SendPropertyChanging();
					this._Middlename = value;
					this.SendPropertyChanged("Middlename");
					this.OnMiddlenameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lastname", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Lastname
		{
			get
			{
				return this._Lastname;
			}
			set
			{
				if ((this._Lastname != value))
				{
					this.OnLastnameChanging(value);
					this.SendPropertyChanging();
					this._Lastname = value;
					this.SendPropertyChanged("Lastname");
					this.OnLastnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactNumber", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ContactNumber
		{
			get
			{
				return this._ContactNumber;
			}
			set
			{
				if ((this._ContactNumber != value))
				{
					this.OnContactNumberChanging(value);
					this.SendPropertyChanging();
					this._ContactNumber = value;
					this.SendPropertyChanged("ContactNumber");
					this.OnContactNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubjectID", DbType="Int")]
		public System.Nullable<int> SubjectID
		{
			get
			{
				return this._SubjectID;
			}
			set
			{
				if ((this._SubjectID != value))
				{
					if (this._Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubjectIDChanging(value);
					this.SendPropertyChanging();
					this._SubjectID = value;
					this.SendPropertyChanged("SubjectID");
					this.OnSubjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Teacher_Schedule", Storage="_Schedules", ThisKey="TeacherID", OtherKey="TeacherID")]
		public EntitySet<Schedule> Schedules
		{
			get
			{
				return this._Schedules;
			}
			set
			{
				this._Schedules.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Teacher_Section", Storage="_Sections", ThisKey="TeacherID", OtherKey="TeacherID")]
		public EntitySet<Section> Sections
		{
			get
			{
				return this._Sections;
			}
			set
			{
				this._Sections.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_Teacher", Storage="_Subject", ThisKey="SubjectID", OtherKey="SubjectID", IsForeignKey=true)]
		public Subject Subject
		{
			get
			{
				return this._Subject.Entity;
			}
			set
			{
				Subject previousValue = this._Subject.Entity;
				if (((previousValue != value) 
							|| (this._Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subject.Entity = null;
						previousValue.Teachers.Remove(this);
					}
					this._Subject.Entity = value;
					if ((value != null))
					{
						value.Teachers.Add(this);
						this._SubjectID = value.SubjectID;
					}
					else
					{
						this._SubjectID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Subject");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Schedules(Schedule entity)
		{
			this.SendPropertyChanging();
			entity.Teacher = this;
		}
		
		private void detach_Schedules(Schedule entity)
		{
			this.SendPropertyChanging();
			entity.Teacher = null;
		}
		
		private void attach_Sections(Section entity)
		{
			this.SendPropertyChanging();
			entity.Teacher = this;
		}
		
		private void detach_Sections(Section entity)
		{
			this.SendPropertyChanging();
			entity.Teacher = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TimeSchedule")]
	public partial class TimeSchedule : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TimeScheduleID;
		
		private string _TimeStart;
		
		private string _TimeEnd;
		
		private EntitySet<Schedule> _Schedules;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTimeScheduleIDChanging(int value);
    partial void OnTimeScheduleIDChanged();
    partial void OnTimeStartChanging(string value);
    partial void OnTimeStartChanged();
    partial void OnTimeEndChanging(string value);
    partial void OnTimeEndChanged();
    #endregion
		
		public TimeSchedule()
		{
			this._Schedules = new EntitySet<Schedule>(new Action<Schedule>(this.attach_Schedules), new Action<Schedule>(this.detach_Schedules));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeScheduleID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TimeScheduleID
		{
			get
			{
				return this._TimeScheduleID;
			}
			set
			{
				if ((this._TimeScheduleID != value))
				{
					this.OnTimeScheduleIDChanging(value);
					this.SendPropertyChanging();
					this._TimeScheduleID = value;
					this.SendPropertyChanged("TimeScheduleID");
					this.OnTimeScheduleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeStart", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string TimeStart
		{
			get
			{
				return this._TimeStart;
			}
			set
			{
				if ((this._TimeStart != value))
				{
					this.OnTimeStartChanging(value);
					this.SendPropertyChanging();
					this._TimeStart = value;
					this.SendPropertyChanged("TimeStart");
					this.OnTimeStartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeEnd", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string TimeEnd
		{
			get
			{
				return this._TimeEnd;
			}
			set
			{
				if ((this._TimeEnd != value))
				{
					this.OnTimeEndChanging(value);
					this.SendPropertyChanging();
					this._TimeEnd = value;
					this.SendPropertyChanged("TimeEnd");
					this.OnTimeEndChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TimeSchedule_Schedule", Storage="_Schedules", ThisKey="TimeScheduleID", OtherKey="TimeScheduleID")]
		public EntitySet<Schedule> Schedules
		{
			get
			{
				return this._Schedules;
			}
			set
			{
				this._Schedules.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Schedules(Schedule entity)
		{
			this.SendPropertyChanging();
			entity.TimeSchedule = this;
		}
		
		private void detach_Schedules(Schedule entity)
		{
			this.SendPropertyChanging();
			entity.TimeSchedule = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserAccount")]
	public partial class UserAccount : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserAccountID;
		
		private string _Firstname;
		
		private string _Middlename;
		
		private string _Lastname;
		
		private string _Username;
		
		private string _Password;
		
		private string _ContactNumber;
		
		private string _AccessCode;
		
		private string _Status;
		
		private bool _IsFirstLogin;
		
		private System.Nullable<int> _UserTypeID;
		
		private EntitySet<UserSecurity> _UserSecurities;
		
		private EntitySet<RequiOfRequirement> _RequiOfRequirements;
		
		private EntityRef<UserType> _UserType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserAccountIDChanging(int value);
    partial void OnUserAccountIDChanged();
    partial void OnFirstnameChanging(string value);
    partial void OnFirstnameChanged();
    partial void OnMiddlenameChanging(string value);
    partial void OnMiddlenameChanged();
    partial void OnLastnameChanging(string value);
    partial void OnLastnameChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnContactNumberChanging(string value);
    partial void OnContactNumberChanged();
    partial void OnAccessCodeChanging(string value);
    partial void OnAccessCodeChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnIsFirstLoginChanging(bool value);
    partial void OnIsFirstLoginChanged();
    partial void OnUserTypeIDChanging(System.Nullable<int> value);
    partial void OnUserTypeIDChanged();
    #endregion
		
		public UserAccount()
		{
			this._UserSecurities = new EntitySet<UserSecurity>(new Action<UserSecurity>(this.attach_UserSecurities), new Action<UserSecurity>(this.detach_UserSecurities));
			this._RequiOfRequirements = new EntitySet<RequiOfRequirement>(new Action<RequiOfRequirement>(this.attach_RequiOfRequirements), new Action<RequiOfRequirement>(this.detach_RequiOfRequirements));
			this._UserType = default(EntityRef<UserType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserAccountID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserAccountID
		{
			get
			{
				return this._UserAccountID;
			}
			set
			{
				if ((this._UserAccountID != value))
				{
					this.OnUserAccountIDChanging(value);
					this.SendPropertyChanging();
					this._UserAccountID = value;
					this.SendPropertyChanged("UserAccountID");
					this.OnUserAccountIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Firstname", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Firstname
		{
			get
			{
				return this._Firstname;
			}
			set
			{
				if ((this._Firstname != value))
				{
					this.OnFirstnameChanging(value);
					this.SendPropertyChanging();
					this._Firstname = value;
					this.SendPropertyChanged("Firstname");
					this.OnFirstnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Middlename", DbType="VarChar(50)")]
		public string Middlename
		{
			get
			{
				return this._Middlename;
			}
			set
			{
				if ((this._Middlename != value))
				{
					this.OnMiddlenameChanging(value);
					this.SendPropertyChanging();
					this._Middlename = value;
					this.SendPropertyChanged("Middlename");
					this.OnMiddlenameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lastname", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Lastname
		{
			get
			{
				return this._Lastname;
			}
			set
			{
				if ((this._Lastname != value))
				{
					this.OnLastnameChanging(value);
					this.SendPropertyChanging();
					this._Lastname = value;
					this.SendPropertyChanged("Lastname");
					this.OnLastnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactNumber", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ContactNumber
		{
			get
			{
				return this._ContactNumber;
			}
			set
			{
				if ((this._ContactNumber != value))
				{
					this.OnContactNumberChanging(value);
					this.SendPropertyChanging();
					this._ContactNumber = value;
					this.SendPropertyChanged("ContactNumber");
					this.OnContactNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccessCode", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string AccessCode
		{
			get
			{
				return this._AccessCode;
			}
			set
			{
				if ((this._AccessCode != value))
				{
					this.OnAccessCodeChanging(value);
					this.SendPropertyChanging();
					this._AccessCode = value;
					this.SendPropertyChanged("AccessCode");
					this.OnAccessCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsFirstLogin", DbType="Bit NOT NULL")]
		public bool IsFirstLogin
		{
			get
			{
				return this._IsFirstLogin;
			}
			set
			{
				if ((this._IsFirstLogin != value))
				{
					this.OnIsFirstLoginChanging(value);
					this.SendPropertyChanging();
					this._IsFirstLogin = value;
					this.SendPropertyChanged("IsFirstLogin");
					this.OnIsFirstLoginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserTypeID", DbType="Int")]
		public System.Nullable<int> UserTypeID
		{
			get
			{
				return this._UserTypeID;
			}
			set
			{
				if ((this._UserTypeID != value))
				{
					if (this._UserType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserTypeIDChanging(value);
					this.SendPropertyChanging();
					this._UserTypeID = value;
					this.SendPropertyChanged("UserTypeID");
					this.OnUserTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_UserSecurity", Storage="_UserSecurities", ThisKey="UserAccountID", OtherKey="UserAccountID")]
		public EntitySet<UserSecurity> UserSecurities
		{
			get
			{
				return this._UserSecurities;
			}
			set
			{
				this._UserSecurities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_RequiOfRequirement", Storage="_RequiOfRequirements", ThisKey="UserAccountID", OtherKey="UserAccountID")]
		public EntitySet<RequiOfRequirement> RequiOfRequirements
		{
			get
			{
				return this._RequiOfRequirements;
			}
			set
			{
				this._RequiOfRequirements.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserType_UserAccount", Storage="_UserType", ThisKey="UserTypeID", OtherKey="UserTypeID", IsForeignKey=true)]
		public UserType UserType
		{
			get
			{
				return this._UserType.Entity;
			}
			set
			{
				UserType previousValue = this._UserType.Entity;
				if (((previousValue != value) 
							|| (this._UserType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserType.Entity = null;
						previousValue.UserAccounts.Remove(this);
					}
					this._UserType.Entity = value;
					if ((value != null))
					{
						value.UserAccounts.Add(this);
						this._UserTypeID = value.UserTypeID;
					}
					else
					{
						this._UserTypeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserSecurities(UserSecurity entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount = this;
		}
		
		private void detach_UserSecurities(UserSecurity entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount = null;
		}
		
		private void attach_RequiOfRequirements(RequiOfRequirement entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount = this;
		}
		
		private void detach_RequiOfRequirements(RequiOfRequirement entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserSecurity")]
	public partial class UserSecurity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserSecurityID;
		
		private string _SecurityQuestion;
		
		private string _Answer;
		
		private System.Nullable<int> _UserAccountID;
		
		private EntityRef<UserAccount> _UserAccount;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserSecurityIDChanging(int value);
    partial void OnUserSecurityIDChanged();
    partial void OnSecurityQuestionChanging(string value);
    partial void OnSecurityQuestionChanged();
    partial void OnAnswerChanging(string value);
    partial void OnAnswerChanged();
    partial void OnUserAccountIDChanging(System.Nullable<int> value);
    partial void OnUserAccountIDChanged();
    #endregion
		
		public UserSecurity()
		{
			this._UserAccount = default(EntityRef<UserAccount>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserSecurityID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserSecurityID
		{
			get
			{
				return this._UserSecurityID;
			}
			set
			{
				if ((this._UserSecurityID != value))
				{
					this.OnUserSecurityIDChanging(value);
					this.SendPropertyChanging();
					this._UserSecurityID = value;
					this.SendPropertyChanged("UserSecurityID");
					this.OnUserSecurityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecurityQuestion", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string SecurityQuestion
		{
			get
			{
				return this._SecurityQuestion;
			}
			set
			{
				if ((this._SecurityQuestion != value))
				{
					this.OnSecurityQuestionChanging(value);
					this.SendPropertyChanging();
					this._SecurityQuestion = value;
					this.SendPropertyChanged("SecurityQuestion");
					this.OnSecurityQuestionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Answer", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Answer
		{
			get
			{
				return this._Answer;
			}
			set
			{
				if ((this._Answer != value))
				{
					this.OnAnswerChanging(value);
					this.SendPropertyChanging();
					this._Answer = value;
					this.SendPropertyChanged("Answer");
					this.OnAnswerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserAccountID", DbType="Int")]
		public System.Nullable<int> UserAccountID
		{
			get
			{
				return this._UserAccountID;
			}
			set
			{
				if ((this._UserAccountID != value))
				{
					if (this._UserAccount.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserAccountIDChanging(value);
					this.SendPropertyChanging();
					this._UserAccountID = value;
					this.SendPropertyChanged("UserAccountID");
					this.OnUserAccountIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_UserSecurity", Storage="_UserAccount", ThisKey="UserAccountID", OtherKey="UserAccountID", IsForeignKey=true)]
		public UserAccount UserAccount
		{
			get
			{
				return this._UserAccount.Entity;
			}
			set
			{
				UserAccount previousValue = this._UserAccount.Entity;
				if (((previousValue != value) 
							|| (this._UserAccount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserAccount.Entity = null;
						previousValue.UserSecurities.Remove(this);
					}
					this._UserAccount.Entity = value;
					if ((value != null))
					{
						value.UserSecurities.Add(this);
						this._UserAccountID = value.UserAccountID;
					}
					else
					{
						this._UserAccountID = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserAccount");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RequiOfRequirement")]
	public partial class RequiOfRequirement : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RequiOfRequirementID;
		
		private System.Nullable<int> _StudentID;
		
		private System.Nullable<int> _SchoolyearID;
		
		private string _Requirement;
		
		private System.Nullable<int> _UserAccountID;
		
		private System.DateTime _DateRelease;
		
		private EntityRef<Schoolyear> _Schoolyear;
		
		private EntityRef<Student> _Student;
		
		private EntityRef<UserAccount> _UserAccount;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRequiOfRequirementIDChanging(int value);
    partial void OnRequiOfRequirementIDChanged();
    partial void OnStudentIDChanging(System.Nullable<int> value);
    partial void OnStudentIDChanged();
    partial void OnSchoolyearIDChanging(System.Nullable<int> value);
    partial void OnSchoolyearIDChanged();
    partial void OnRequirementChanging(string value);
    partial void OnRequirementChanged();
    partial void OnUserAccountIDChanging(System.Nullable<int> value);
    partial void OnUserAccountIDChanged();
    partial void OnDateReleaseChanging(System.DateTime value);
    partial void OnDateReleaseChanged();
    #endregion
		
		public RequiOfRequirement()
		{
			this._Schoolyear = default(EntityRef<Schoolyear>);
			this._Student = default(EntityRef<Student>);
			this._UserAccount = default(EntityRef<UserAccount>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequiOfRequirementID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RequiOfRequirementID
		{
			get
			{
				return this._RequiOfRequirementID;
			}
			set
			{
				if ((this._RequiOfRequirementID != value))
				{
					this.OnRequiOfRequirementIDChanging(value);
					this.SendPropertyChanging();
					this._RequiOfRequirementID = value;
					this.SendPropertyChanged("RequiOfRequirementID");
					this.OnRequiOfRequirementIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentID", DbType="Int")]
		public System.Nullable<int> StudentID
		{
			get
			{
				return this._StudentID;
			}
			set
			{
				if ((this._StudentID != value))
				{
					if (this._Student.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudentIDChanging(value);
					this.SendPropertyChanging();
					this._StudentID = value;
					this.SendPropertyChanged("StudentID");
					this.OnStudentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchoolyearID", DbType="Int")]
		public System.Nullable<int> SchoolyearID
		{
			get
			{
				return this._SchoolyearID;
			}
			set
			{
				if ((this._SchoolyearID != value))
				{
					if (this._Schoolyear.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSchoolyearIDChanging(value);
					this.SendPropertyChanging();
					this._SchoolyearID = value;
					this.SendPropertyChanged("SchoolyearID");
					this.OnSchoolyearIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Requirement", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Requirement
		{
			get
			{
				return this._Requirement;
			}
			set
			{
				if ((this._Requirement != value))
				{
					this.OnRequirementChanging(value);
					this.SendPropertyChanging();
					this._Requirement = value;
					this.SendPropertyChanged("Requirement");
					this.OnRequirementChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserAccountID", DbType="Int")]
		public System.Nullable<int> UserAccountID
		{
			get
			{
				return this._UserAccountID;
			}
			set
			{
				if ((this._UserAccountID != value))
				{
					if (this._UserAccount.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserAccountIDChanging(value);
					this.SendPropertyChanging();
					this._UserAccountID = value;
					this.SendPropertyChanged("UserAccountID");
					this.OnUserAccountIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateRelease", DbType="Date NOT NULL")]
		public System.DateTime DateRelease
		{
			get
			{
				return this._DateRelease;
			}
			set
			{
				if ((this._DateRelease != value))
				{
					this.OnDateReleaseChanging(value);
					this.SendPropertyChanging();
					this._DateRelease = value;
					this.SendPropertyChanged("DateRelease");
					this.OnDateReleaseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Schoolyear_RequiOfRequirement", Storage="_Schoolyear", ThisKey="SchoolyearID", OtherKey="SchoolyearID", IsForeignKey=true)]
		public Schoolyear Schoolyear
		{
			get
			{
				return this._Schoolyear.Entity;
			}
			set
			{
				Schoolyear previousValue = this._Schoolyear.Entity;
				if (((previousValue != value) 
							|| (this._Schoolyear.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Schoolyear.Entity = null;
						previousValue.RequiOfRequirements.Remove(this);
					}
					this._Schoolyear.Entity = value;
					if ((value != null))
					{
						value.RequiOfRequirements.Add(this);
						this._SchoolyearID = value.SchoolyearID;
					}
					else
					{
						this._SchoolyearID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Schoolyear");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_RequiOfRequirement", Storage="_Student", ThisKey="StudentID", OtherKey="StudentID", IsForeignKey=true)]
		public Student Student
		{
			get
			{
				return this._Student.Entity;
			}
			set
			{
				Student previousValue = this._Student.Entity;
				if (((previousValue != value) 
							|| (this._Student.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Student.Entity = null;
						previousValue.RequiOfRequirements.Remove(this);
					}
					this._Student.Entity = value;
					if ((value != null))
					{
						value.RequiOfRequirements.Add(this);
						this._StudentID = value.StudentID;
					}
					else
					{
						this._StudentID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Student");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_RequiOfRequirement", Storage="_UserAccount", ThisKey="UserAccountID", OtherKey="UserAccountID", IsForeignKey=true)]
		public UserAccount UserAccount
		{
			get
			{
				return this._UserAccount.Entity;
			}
			set
			{
				UserAccount previousValue = this._UserAccount.Entity;
				if (((previousValue != value) 
							|| (this._UserAccount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserAccount.Entity = null;
						previousValue.RequiOfRequirements.Remove(this);
					}
					this._UserAccount.Entity = value;
					if ((value != null))
					{
						value.RequiOfRequirements.Add(this);
						this._UserAccountID = value.UserAccountID;
					}
					else
					{
						this._UserAccountID = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserAccount");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Book")]
	public partial class Book : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BookID;
		
		private string _Bookname;
		
		private string _BookDesciption;
		
		private string _YearLevel;
		
		private string _BookAuthor;
		
		private System.DateTime _BookReleased;
		
		private int _BookQuantity;
		
		private EntitySet<ProcessBook> _ProcessBooks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBookIDChanging(int value);
    partial void OnBookIDChanged();
    partial void OnBooknameChanging(string value);
    partial void OnBooknameChanged();
    partial void OnBookDesciptionChanging(string value);
    partial void OnBookDesciptionChanged();
    partial void OnYearLevelChanging(string value);
    partial void OnYearLevelChanged();
    partial void OnBookAuthorChanging(string value);
    partial void OnBookAuthorChanged();
    partial void OnBookReleasedChanging(System.DateTime value);
    partial void OnBookReleasedChanged();
    partial void OnBookQuantityChanging(int value);
    partial void OnBookQuantityChanged();
    #endregion
		
		public Book()
		{
			this._ProcessBooks = new EntitySet<ProcessBook>(new Action<ProcessBook>(this.attach_ProcessBooks), new Action<ProcessBook>(this.detach_ProcessBooks));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BookID
		{
			get
			{
				return this._BookID;
			}
			set
			{
				if ((this._BookID != value))
				{
					this.OnBookIDChanging(value);
					this.SendPropertyChanging();
					this._BookID = value;
					this.SendPropertyChanged("BookID");
					this.OnBookIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Bookname", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Bookname
		{
			get
			{
				return this._Bookname;
			}
			set
			{
				if ((this._Bookname != value))
				{
					this.OnBooknameChanging(value);
					this.SendPropertyChanging();
					this._Bookname = value;
					this.SendPropertyChanged("Bookname");
					this.OnBooknameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookDesciption", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string BookDesciption
		{
			get
			{
				return this._BookDesciption;
			}
			set
			{
				if ((this._BookDesciption != value))
				{
					this.OnBookDesciptionChanging(value);
					this.SendPropertyChanging();
					this._BookDesciption = value;
					this.SendPropertyChanged("BookDesciption");
					this.OnBookDesciptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YearLevel", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string YearLevel
		{
			get
			{
				return this._YearLevel;
			}
			set
			{
				if ((this._YearLevel != value))
				{
					this.OnYearLevelChanging(value);
					this.SendPropertyChanging();
					this._YearLevel = value;
					this.SendPropertyChanged("YearLevel");
					this.OnYearLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookAuthor", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string BookAuthor
		{
			get
			{
				return this._BookAuthor;
			}
			set
			{
				if ((this._BookAuthor != value))
				{
					this.OnBookAuthorChanging(value);
					this.SendPropertyChanging();
					this._BookAuthor = value;
					this.SendPropertyChanged("BookAuthor");
					this.OnBookAuthorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookReleased", DbType="Date NOT NULL")]
		public System.DateTime BookReleased
		{
			get
			{
				return this._BookReleased;
			}
			set
			{
				if ((this._BookReleased != value))
				{
					this.OnBookReleasedChanging(value);
					this.SendPropertyChanging();
					this._BookReleased = value;
					this.SendPropertyChanged("BookReleased");
					this.OnBookReleasedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookQuantity", DbType="Int NOT NULL")]
		public int BookQuantity
		{
			get
			{
				return this._BookQuantity;
			}
			set
			{
				if ((this._BookQuantity != value))
				{
					this.OnBookQuantityChanging(value);
					this.SendPropertyChanging();
					this._BookQuantity = value;
					this.SendPropertyChanged("BookQuantity");
					this.OnBookQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Book_ProcessBook", Storage="_ProcessBooks", ThisKey="BookID", OtherKey="BookID")]
		public EntitySet<ProcessBook> ProcessBooks
		{
			get
			{
				return this._ProcessBooks;
			}
			set
			{
				this._ProcessBooks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProcessBooks(ProcessBook entity)
		{
			this.SendPropertyChanging();
			entity.Book = this;
		}
		
		private void detach_ProcessBooks(ProcessBook entity)
		{
			this.SendPropertyChanging();
			entity.Book = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProcessBook")]
	public partial class ProcessBook : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProcessBookID;
		
		private System.Nullable<int> _StudentID;
		
		private System.Nullable<int> _BookID;
		
		private string _Distributer;
		
		private System.DateTime _BookRelease;
		
		private System.Nullable<System.DateTime> _BookReturn;
		
		private EntityRef<Book> _Book;
		
		private EntityRef<Student> _Student;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProcessBookIDChanging(int value);
    partial void OnProcessBookIDChanged();
    partial void OnStudentIDChanging(System.Nullable<int> value);
    partial void OnStudentIDChanged();
    partial void OnBookIDChanging(System.Nullable<int> value);
    partial void OnBookIDChanged();
    partial void OnDistributerChanging(string value);
    partial void OnDistributerChanged();
    partial void OnBookReleaseChanging(System.DateTime value);
    partial void OnBookReleaseChanged();
    partial void OnBookReturnChanging(System.Nullable<System.DateTime> value);
    partial void OnBookReturnChanged();
    #endregion
		
		public ProcessBook()
		{
			this._Book = default(EntityRef<Book>);
			this._Student = default(EntityRef<Student>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProcessBookID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProcessBookID
		{
			get
			{
				return this._ProcessBookID;
			}
			set
			{
				if ((this._ProcessBookID != value))
				{
					this.OnProcessBookIDChanging(value);
					this.SendPropertyChanging();
					this._ProcessBookID = value;
					this.SendPropertyChanged("ProcessBookID");
					this.OnProcessBookIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentID", DbType="Int")]
		public System.Nullable<int> StudentID
		{
			get
			{
				return this._StudentID;
			}
			set
			{
				if ((this._StudentID != value))
				{
					if (this._Student.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudentIDChanging(value);
					this.SendPropertyChanging();
					this._StudentID = value;
					this.SendPropertyChanged("StudentID");
					this.OnStudentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookID", DbType="Int")]
		public System.Nullable<int> BookID
		{
			get
			{
				return this._BookID;
			}
			set
			{
				if ((this._BookID != value))
				{
					if (this._Book.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBookIDChanging(value);
					this.SendPropertyChanging();
					this._BookID = value;
					this.SendPropertyChanged("BookID");
					this.OnBookIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Distributer", DbType="VarChar(50)")]
		public string Distributer
		{
			get
			{
				return this._Distributer;
			}
			set
			{
				if ((this._Distributer != value))
				{
					this.OnDistributerChanging(value);
					this.SendPropertyChanging();
					this._Distributer = value;
					this.SendPropertyChanged("Distributer");
					this.OnDistributerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookRelease", DbType="Date NOT NULL")]
		public System.DateTime BookRelease
		{
			get
			{
				return this._BookRelease;
			}
			set
			{
				if ((this._BookRelease != value))
				{
					this.OnBookReleaseChanging(value);
					this.SendPropertyChanging();
					this._BookRelease = value;
					this.SendPropertyChanged("BookRelease");
					this.OnBookReleaseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookReturn", DbType="Date")]
		public System.Nullable<System.DateTime> BookReturn
		{
			get
			{
				return this._BookReturn;
			}
			set
			{
				if ((this._BookReturn != value))
				{
					this.OnBookReturnChanging(value);
					this.SendPropertyChanging();
					this._BookReturn = value;
					this.SendPropertyChanged("BookReturn");
					this.OnBookReturnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Book_ProcessBook", Storage="_Book", ThisKey="BookID", OtherKey="BookID", IsForeignKey=true)]
		public Book Book
		{
			get
			{
				return this._Book.Entity;
			}
			set
			{
				Book previousValue = this._Book.Entity;
				if (((previousValue != value) 
							|| (this._Book.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Book.Entity = null;
						previousValue.ProcessBooks.Remove(this);
					}
					this._Book.Entity = value;
					if ((value != null))
					{
						value.ProcessBooks.Add(this);
						this._BookID = value.BookID;
					}
					else
					{
						this._BookID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Book");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_ProcessBook", Storage="_Student", ThisKey="StudentID", OtherKey="StudentID", IsForeignKey=true)]
		public Student Student
		{
			get
			{
				return this._Student.Entity;
			}
			set
			{
				Student previousValue = this._Student.Entity;
				if (((previousValue != value) 
							|| (this._Student.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Student.Entity = null;
						previousValue.ProcessBooks.Remove(this);
					}
					this._Student.Entity = value;
					if ((value != null))
					{
						value.ProcessBooks.Add(this);
						this._StudentID = value.StudentID;
					}
					else
					{
						this._StudentID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Student");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Inquiry")]
	public partial class Inquiry : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _InquiryID;
		
		private string _InquiryFor;
		
		private string _InquiryDesc;
		
		private string _Creator;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInquiryIDChanging(int value);
    partial void OnInquiryIDChanged();
    partial void OnInquiryForChanging(string value);
    partial void OnInquiryForChanged();
    partial void OnInquiryDescChanging(string value);
    partial void OnInquiryDescChanged();
    partial void OnCreatorChanging(string value);
    partial void OnCreatorChanged();
    #endregion
		
		public Inquiry()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InquiryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int InquiryID
		{
			get
			{
				return this._InquiryID;
			}
			set
			{
				if ((this._InquiryID != value))
				{
					this.OnInquiryIDChanging(value);
					this.SendPropertyChanging();
					this._InquiryID = value;
					this.SendPropertyChanged("InquiryID");
					this.OnInquiryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InquiryFor", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string InquiryFor
		{
			get
			{
				return this._InquiryFor;
			}
			set
			{
				if ((this._InquiryFor != value))
				{
					this.OnInquiryForChanging(value);
					this.SendPropertyChanging();
					this._InquiryFor = value;
					this.SendPropertyChanged("InquiryFor");
					this.OnInquiryForChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InquiryDesc", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string InquiryDesc
		{
			get
			{
				return this._InquiryDesc;
			}
			set
			{
				if ((this._InquiryDesc != value))
				{
					this.OnInquiryDescChanging(value);
					this.SendPropertyChanging();
					this._InquiryDesc = value;
					this.SendPropertyChanged("InquiryDesc");
					this.OnInquiryDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Creator", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Creator
		{
			get
			{
				return this._Creator;
			}
			set
			{
				if ((this._Creator != value))
				{
					this.OnCreatorChanging(value);
					this.SendPropertyChanging();
					this._Creator = value;
					this.SendPropertyChanged("Creator");
					this.OnCreatorChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
